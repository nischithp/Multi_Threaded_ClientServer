//Name: Nischith Javagal Panish
//UTA ID: 1001780908

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.SwingConstants;
import java.awt.Insets;
import javax.swing.SpringLayout;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import java.awt.Color;
import javax.swing.JCheckBox;
import java.awt.Font;

public class ClientProg extends JFrame {

	public static JPanel contentPane = new JPanel();
	public static JTextField textField;
	public static JTextArea clientInfoLabel = new JTextArea();

	public JTextArea getClientInfoLabel() {
		return clientInfoLabel;
	}

	public void setClientInfoLabel(JTextArea clientInfoLabel) {
		this.clientInfoLabel = clientInfoLabel;
	}

	private String name;
	private final ButtonGroup buttonGroup = new ButtonGroup();
	private JTextField createTextField;
	private JTextField moveSourcePath;
	private JTextField moveDestPath;
	private JTextField deletePath;
	private JTextField renameSource;
	private JTextField renameDest;
	private static JCheckBox hd1CheckBox ;
	private static JCheckBox hd2CheckBox ;
	private static JCheckBox hd3CheckBox ;
	private static JButton syncButton;
	private static JButton deSyncButton;
	
	DataInputStream dataInputStream;
	DataOutputStream dataOutputStream;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
//		This starts the Client process and calls the constructor ClientProg to initialise all the GUI elements. This was also mostly autogenerated using JFrames and WindowBuilder
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ClientProg frame = new ClientProg();
					frame.setTitle("Client");
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public ClientProg() {
		// Sets the items in the Client GUI and adds the action listeners for the exit
		// and the Submit Name buttons.
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1088, 639);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		JButton exitButton = new JButton("Exit");
		exitButton.setVerticalAlignment(SwingConstants.TOP);
		exitButton.setHorizontalAlignment(SwingConstants.RIGHT);
		
		exitButton.addActionListener(new ActionListener() {

			@Override
			// Setting the data for Currently Connected users if they click on the exit
			// button. This shows a dosconnection message on the server side.
			public void actionPerformed(ActionEvent e) {
				ServerProg.currentlyConnected.append(name + " has disconnected");
				ServerProg.infoLabel.append(name + " has disconnected");
				System.exit(0);
			}

		});

		JLabel lblNewLabel = new JLabel("Enter name:");

		textField = new JTextField();
		textField.setColumns(10);
		JButton submitUserNameButton = new JButton("Submit Name");
		JButton enableButton = new JButton("Enable Button");
		SpringLayout sl_contentPane = new SpringLayout();
		sl_contentPane.putConstraint(SpringLayout.NORTH, exitButton, -4, SpringLayout.NORTH, lblNewLabel);
		sl_contentPane.putConstraint(SpringLayout.WEST, exitButton, 946, SpringLayout.WEST, contentPane);
		sl_contentPane.putConstraint(SpringLayout.EAST, exitButton, -21, SpringLayout.EAST, contentPane);
		sl_contentPane.putConstraint(SpringLayout.EAST, enableButton, -673, SpringLayout.EAST, contentPane);
		sl_contentPane.putConstraint(SpringLayout.WEST, lblNewLabel, 5, SpringLayout.WEST, contentPane);
		sl_contentPane.putConstraint(SpringLayout.NORTH, enableButton, 0, SpringLayout.NORTH, textField);
		sl_contentPane.putConstraint(SpringLayout.WEST, enableButton, 6, SpringLayout.EAST, submitUserNameButton);
		sl_contentPane.putConstraint(SpringLayout.SOUTH, lblNewLabel, -12, SpringLayout.NORTH, textField);
		sl_contentPane.putConstraint(SpringLayout.NORTH, textField, 0, SpringLayout.NORTH, submitUserNameButton);
		sl_contentPane.putConstraint(SpringLayout.WEST, textField, 5, SpringLayout.WEST, lblNewLabel);
		sl_contentPane.putConstraint(SpringLayout.EAST, textField, -6, SpringLayout.WEST, submitUserNameButton);
		sl_contentPane.putConstraint(SpringLayout.NORTH, submitUserNameButton, 51, SpringLayout.NORTH, contentPane);
		sl_contentPane.putConstraint(SpringLayout.WEST, submitUserNameButton, 193, SpringLayout.WEST, contentPane);
		contentPane.setLayout(sl_contentPane);
		contentPane.add(exitButton);
		contentPane.add(lblNewLabel);
		contentPane.add(textField);
		contentPane.add(submitUserNameButton);
		contentPane.add(enableButton);

		JLabel folderContentLabel = new JLabel("Here are your folder's contents:");
		contentPane.add(folderContentLabel);

		JRadioButton createRadioButton = new JRadioButton("Create new Folder");
		sl_contentPane.putConstraint(SpringLayout.NORTH, createRadioButton, 135, SpringLayout.NORTH, contentPane);
		sl_contentPane.putConstraint(SpringLayout.SOUTH, folderContentLabel, -6, SpringLayout.NORTH, createRadioButton);
		buttonGroup.add(createRadioButton);
		sl_contentPane.putConstraint(SpringLayout.WEST, createRadioButton, 26, SpringLayout.WEST, contentPane);
		contentPane.add(createRadioButton);

		JRadioButton deleteRadioButton = new JRadioButton("Delete Folder");
		buttonGroup.add(deleteRadioButton);
		contentPane.add(deleteRadioButton);

		JRadioButton moveRadioButton = new JRadioButton("Move Folder");
		sl_contentPane.putConstraint(SpringLayout.EAST, deleteRadioButton, 0, SpringLayout.EAST, moveRadioButton);
		sl_contentPane.putConstraint(SpringLayout.WEST, moveRadioButton, 0, SpringLayout.WEST, createRadioButton);
		buttonGroup.add(moveRadioButton);
		contentPane.add(moveRadioButton);

		JRadioButton renameRadioButton = new JRadioButton("Rename Folder");
		sl_contentPane.putConstraint(SpringLayout.WEST, renameRadioButton, 0, SpringLayout.WEST, createRadioButton);
		contentPane.add(renameRadioButton);

		JRadioButton listContentRadioButton = new JRadioButton("List Contents of Directory");
		sl_contentPane.putConstraint(SpringLayout.EAST, folderContentLabel, 0, SpringLayout.EAST, listContentRadioButton);
		sl_contentPane.putConstraint(SpringLayout.WEST, listContentRadioButton, 0, SpringLayout.WEST,
				createRadioButton);
		contentPane.add(listContentRadioButton);

		ButtonGroup selection = new ButtonGroup();
		selection.add(listContentRadioButton);
		selection.add(renameRadioButton);
		selection.add(moveRadioButton);
		selection.add(deleteRadioButton);
		selection.add(createRadioButton);

		JButton selectionButton = new JButton("Perform Action");
		selectionButton.setFont(new Font("Tw Cen MT Condensed Extra Bold", Font.PLAIN, 19));
		sl_contentPane.putConstraint(SpringLayout.SOUTH, selectionButton, -87, SpringLayout.SOUTH, contentPane);
		contentPane.add(selectionButton);
		selectionButton.setEnabled(false);

		listContentRadioButton.setSelected(true);

		JLabel lblNewLabel_1 = new JLabel("Enter Name of folder to be created:");
		sl_contentPane.putConstraint(SpringLayout.NORTH, moveRadioButton, 14, SpringLayout.SOUTH, lblNewLabel_1);
		sl_contentPane.putConstraint(SpringLayout.NORTH, lblNewLabel_1, 7, SpringLayout.SOUTH, createRadioButton);
		sl_contentPane.putConstraint(SpringLayout.WEST, lblNewLabel_1, 10, SpringLayout.WEST, createRadioButton);
		contentPane.add(lblNewLabel_1);

		createTextField = new JTextField();
		sl_contentPane.putConstraint(SpringLayout.WEST, selectionButton, 0, SpringLayout.WEST, createTextField);
		sl_contentPane.putConstraint(SpringLayout.NORTH, createTextField, -3, SpringLayout.NORTH, lblNewLabel_1);
		sl_contentPane.putConstraint(SpringLayout.WEST, createTextField, 25, SpringLayout.EAST, lblNewLabel_1);
		sl_contentPane.putConstraint(SpringLayout.EAST, createTextField, 304, SpringLayout.EAST, lblNewLabel_1);
		contentPane.add(createTextField);
		createTextField.setColumns(10);

		JLabel lblNewLabel_2 = new JLabel("Enter the path of the folder to be moved:");
		sl_contentPane.putConstraint(SpringLayout.NORTH, lblNewLabel_2, 6, SpringLayout.SOUTH, moveRadioButton);
		sl_contentPane.putConstraint(SpringLayout.WEST, lblNewLabel_2, 10, SpringLayout.WEST, moveRadioButton);
		contentPane.add(lblNewLabel_2);

		JLabel lblNewLabel_3 = new JLabel("Enter the path TO WHICH the folder is to be moved:");
		sl_contentPane.putConstraint(SpringLayout.NORTH, lblNewLabel_3, 13, SpringLayout.SOUTH, lblNewLabel_2);
		sl_contentPane.putConstraint(SpringLayout.WEST, lblNewLabel_3, 0, SpringLayout.WEST, lblNewLabel_1);
		contentPane.add(lblNewLabel_3);

		moveSourcePath = new JTextField();
		sl_contentPane.putConstraint(SpringLayout.NORTH, moveSourcePath, -3, SpringLayout.NORTH, lblNewLabel_2);
		sl_contentPane.putConstraint(SpringLayout.WEST, moveSourcePath, 0, SpringLayout.WEST, createTextField);
		sl_contentPane.putConstraint(SpringLayout.EAST, moveSourcePath, 279, SpringLayout.WEST, createTextField);
		contentPane.add(moveSourcePath);
		moveSourcePath.setColumns(10);

		moveDestPath = new JTextField();
		sl_contentPane.putConstraint(SpringLayout.NORTH, moveDestPath, -3, SpringLayout.NORTH, lblNewLabel_3);
		sl_contentPane.putConstraint(SpringLayout.WEST, moveDestPath, 30, SpringLayout.EAST, lblNewLabel_3);
		sl_contentPane.putConstraint(SpringLayout.EAST, moveDestPath, 71, SpringLayout.EAST, createTextField);
		moveDestPath.setColumns(10);
		contentPane.add(moveDestPath);

		JLabel lblNewLabel_4 = new JLabel(
				"Enter the name of the folder to be deleted (along with the path if it is in sub-directories)");
		sl_contentPane.putConstraint(SpringLayout.SOUTH, lblNewLabel_4, -260, SpringLayout.SOUTH, contentPane);
		sl_contentPane.putConstraint(SpringLayout.NORTH, renameRadioButton, 18, SpringLayout.SOUTH, lblNewLabel_4);
		sl_contentPane.putConstraint(SpringLayout.WEST, lblNewLabel_4, 36, SpringLayout.WEST, contentPane);
		sl_contentPane.putConstraint(SpringLayout.SOUTH, deleteRadioButton, -6, SpringLayout.NORTH, lblNewLabel_4);
		contentPane.add(lblNewLabel_4);

		deletePath = new JTextField();
		sl_contentPane.putConstraint(SpringLayout.WEST, deletePath, 489, SpringLayout.WEST, contentPane);
		sl_contentPane.putConstraint(SpringLayout.EAST, lblNewLabel_4, -12, SpringLayout.WEST, deletePath);
		sl_contentPane.putConstraint(SpringLayout.NORTH, deletePath, -3, SpringLayout.NORTH, lblNewLabel_4);
		sl_contentPane.putConstraint(SpringLayout.EAST, deletePath, -262, SpringLayout.EAST, contentPane);
		contentPane.add(deletePath);
		deletePath.setColumns(10);

		JLabel lblNewLabel_5 = new JLabel("Enter the name of the folder to be renamed:");
		sl_contentPane.putConstraint(SpringLayout.NORTH, listContentRadioButton, 39, SpringLayout.SOUTH, lblNewLabel_5);
		sl_contentPane.putConstraint(SpringLayout.NORTH, lblNewLabel_5, 9, SpringLayout.SOUTH, renameRadioButton);
		sl_contentPane.putConstraint(SpringLayout.WEST, lblNewLabel_5, 10, SpringLayout.WEST, renameRadioButton);
		contentPane.add(lblNewLabel_5);

		JLabel lblNewLabel_6 = new JLabel("Enter the new name of the folder:");
		sl_contentPane.putConstraint(SpringLayout.WEST, lblNewLabel_6, 0, SpringLayout.WEST, lblNewLabel_1);
		sl_contentPane.putConstraint(SpringLayout.SOUTH, lblNewLabel_6, -6, SpringLayout.NORTH, listContentRadioButton);
		contentPane.add(lblNewLabel_6);

		renameSource = new JTextField();
		sl_contentPane.putConstraint(SpringLayout.NORTH, renameSource, 46, SpringLayout.SOUTH, deletePath);
		sl_contentPane.putConstraint(SpringLayout.WEST, renameSource, 90, SpringLayout.EAST, lblNewLabel_5);
		sl_contentPane.putConstraint(SpringLayout.EAST, renameSource, 369, SpringLayout.EAST, lblNewLabel_5);
		contentPane.add(renameSource);
		renameSource.setColumns(10);

		renameDest = new JTextField();
		sl_contentPane.putConstraint(SpringLayout.NORTH, renameDest, 19, SpringLayout.SOUTH, renameSource);
		sl_contentPane.putConstraint(SpringLayout.WEST, renameDest, 145, SpringLayout.EAST, lblNewLabel_6);
		sl_contentPane.putConstraint(SpringLayout.EAST, renameDest, 424, SpringLayout.EAST, lblNewLabel_6);
		renameDest.setColumns(10);
		contentPane.add(renameDest);
		clientInfoLabel.setTabSize(2);
		clientInfoLabel.setRows(100);

		clientInfoLabel.setEditable(false);
		clientInfoLabel.setEnabled(true);
		clientInfoLabel.setMargin(new Insets(0, 0, 0, 0));
		sl_contentPane.putConstraint(SpringLayout.NORTH, clientInfoLabel, -32, SpringLayout.NORTH, createRadioButton);
		sl_contentPane.putConstraint(SpringLayout.WEST, clientInfoLabel, -401, SpringLayout.EAST, contentPane);
		sl_contentPane.putConstraint(SpringLayout.SOUTH, clientInfoLabel, -25, SpringLayout.NORTH, deletePath);
		sl_contentPane.putConstraint(SpringLayout.EAST, clientInfoLabel, -26, SpringLayout.EAST, contentPane);

		JScrollPane scrollInfoLabel = new JScrollPane(clientInfoLabel);
		sl_contentPane.putConstraint(SpringLayout.NORTH, scrollInfoLabel, 27, SpringLayout.SOUTH, deletePath);
		sl_contentPane.putConstraint(SpringLayout.WEST, scrollInfoLabel, -389, SpringLayout.EAST, contentPane);
		sl_contentPane.putConstraint(SpringLayout.SOUTH, scrollInfoLabel, 396, SpringLayout.SOUTH, createRadioButton);
		sl_contentPane.putConstraint(SpringLayout.EAST, scrollInfoLabel, -33, SpringLayout.EAST, contentPane);
		scrollInfoLabel.setBackground(new Color(240, 240, 240));

		contentPane.add(scrollInfoLabel);

		JLabel lblNewLabel_7 = new JLabel("Client Logs:");
		sl_contentPane.putConstraint(SpringLayout.SOUTH, lblNewLabel_7, -6, SpringLayout.NORTH, scrollInfoLabel);
		sl_contentPane.putConstraint(SpringLayout.EAST, lblNewLabel_7, -185, SpringLayout.EAST, contentPane);
		contentPane.add(lblNewLabel_7);
		
		hd1CheckBox = new JCheckBox("Home Directory 1");
		sl_contentPane.putConstraint(SpringLayout.NORTH, hd1CheckBox, 0, SpringLayout.NORTH, folderContentLabel);
		hd1CheckBox.setBackground(Color.PINK);
		contentPane.add(hd1CheckBox);
		
		hd2CheckBox = new JCheckBox("Home Directory 2");
		sl_contentPane.putConstraint(SpringLayout.WEST, hd2CheckBox, 201, SpringLayout.EAST, createTextField);
		sl_contentPane.putConstraint(SpringLayout.WEST, hd1CheckBox, 0, SpringLayout.WEST, hd2CheckBox);
		hd2CheckBox.setBackground(Color.PINK);
		contentPane.add(hd2CheckBox);
		
		hd3CheckBox = new JCheckBox("Home Directory 3");
		sl_contentPane.putConstraint(SpringLayout.NORTH, hd3CheckBox, 170, SpringLayout.NORTH, contentPane);
		sl_contentPane.putConstraint(SpringLayout.WEST, hd3CheckBox, 201, SpringLayout.EAST, createTextField);
		sl_contentPane.putConstraint(SpringLayout.SOUTH, hd2CheckBox, -3, SpringLayout.NORTH, hd3CheckBox);
		hd3CheckBox.setBackground(Color.PINK);
		contentPane.add(hd3CheckBox);
		
		syncButton = new JButton("Sync");
		sl_contentPane.putConstraint(SpringLayout.SOUTH, syncButton, 0, SpringLayout.SOUTH, moveSourcePath);
		contentPane.add(syncButton);
		
		deSyncButton = new JButton("De-sync");
		sl_contentPane.putConstraint(SpringLayout.WEST, deSyncButton, 799, SpringLayout.WEST, contentPane);
		sl_contentPane.putConstraint(SpringLayout.EAST, syncButton, -31, SpringLayout.WEST, deSyncButton);
		sl_contentPane.putConstraint(SpringLayout.NORTH, deSyncButton, 0, SpringLayout.NORTH, syncButton);
		contentPane.add(deSyncButton);
		
		JLabel lblNewLabel_8 = new JLabel("Sync And Desync Menu");
		sl_contentPane.putConstraint(SpringLayout.SOUTH, lblNewLabel_8, -6, SpringLayout.NORTH, hd1CheckBox);
		sl_contentPane.putConstraint(SpringLayout.EAST, lblNewLabel_8, -192, SpringLayout.EAST, contentPane);
		lblNewLabel_8.setBackground(Color.CYAN);
		lblNewLabel_8.setFont(new Font("Tw Cen MT Condensed Extra Bold", Font.PLAIN, 18));
		lblNewLabel_8.setForeground(Color.BLACK);
		contentPane.add(lblNewLabel_8);
		
//		An Action listener for the desync button which writes the operation to be performed to the thread in the format <Operation>. The SocketThread class uses this information to desync the directories of the particular user
		deSyncButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					dataOutputStream.writeUTF("desync");
					clientInfoLabel.append("\n Desync succesful");
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		});
		
//		Add an action listener for the Sync button. Check what checkboxes have been checked and based on that, send the call to the Thread to copy folders over from the server-side to the client. 
		syncButton.addActionListener(new ActionListener() {
			String message = "server ";
			@Override
			public void actionPerformed(ActionEvent e) {
				if (hd1CheckBox.isSelected()) {
					message = message + "hd1 ";
				}
				if (hd2CheckBox.isSelected()) {
					message = message + "hd2 ";
				}
				if (hd3CheckBox.isSelected()) {
					message = message + "hd3 ";
				}
				try {
					dataOutputStream.writeUTF(message);
					clientInfoLabel.append("\nSelected Directories Synced into your folder");
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		});
		enableButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				submitUserNameButton.setEnabled(true);
			}

		});
		
//	 	This method starts the Client socket by calling the startClient() with the name entered by the user in the text field.
		submitUserNameButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				name = textField.getText();
				startClient(name);
				submitUserNameButton.setEnabled(false);
				selectionButton.setEnabled(true);
			}

		});

//								I have created a button group here which consists of all the radio buttons on the Client GUI. Here, When the "Perform Action" button is clicked, this is invoked
//								and depending on which radio button is selected, the data is sent to the server is the format <Operation> <Parameter1> <Parameter2> and this is handled 
//								serverside by splitting the string received and performing the action based on the first item in the split string array
		selectionButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if (createRadioButton.isSelected()) {
					if (createTextField.getText() != null) {
						String name = createTextField.getText();
						System.out.println("Folder name created: " + name);
						try {
							dataOutputStream.writeUTF("create " + name);
							JOptionPane.showMessageDialog(null, dataInputStream.readUTF().toString());
						} catch (IOException e1) {
							JOptionPane.showMessageDialog(contentPane, "Please try again", "Error",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						}
					} else {
						JOptionPane.showMessageDialog(contentPane, "Please enter a file name", "Error",
								JOptionPane.ERROR_MESSAGE);
						System.out.println("Please enter a file name");
					}
				} else if (moveRadioButton.isSelected()) {
					String source = moveSourcePath.getText();
					String dest = moveDestPath.getText();
					try {
						dataOutputStream.writeUTF("move " + source + " " + dest);
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				} else if (deleteRadioButton.isSelected()) {
					String path = deletePath.getText();
					try {
						dataOutputStream.writeUTF("delete " + path);
					} catch (IOException e1) {
						e1.printStackTrace();
					}

				} else if (renameRadioButton.isSelected()) {
					String source = renameSource.getText();
					String dest = renameDest.getText();
					try {
						dataOutputStream.writeUTF("rename " + source + " " + dest);
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				} else if (listContentRadioButton.isSelected()) {
					try {
						dataOutputStream.writeUTF("list");
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				}
				selectionButton.setEnabled(true);
			}
		});
	}

//	 Starts the client and sends the name entered by the user in the textfield to be verified by the server
//	 After receiving data from server, it displays "Connected" along with the path that has been allocated to this client from the server.
	private void startClient(String name) {

		try {
			Socket s = new Socket("localhost", 6666);
			DataInputStream dataInputStream = new DataInputStream(s.getInputStream());
			DataOutputStream dataOutputStream = new DataOutputStream(s.getOutputStream());

			this.dataInputStream = dataInputStream;
			this.dataOutputStream = dataOutputStream;

			dataOutputStream.writeUTF(name);
			dataOutputStream.flush();

			String data = dataInputStream.readUTF();
			clientInfoLabel.append("\nConnected to server");
			clientInfoLabel.append("\nPath assigned to client:" + data + "\n");

		} catch (Exception e) {
			System.out.println(e);
		}
	}
}
